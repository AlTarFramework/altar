// -*- C++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 2013-2020 parasim inc
// all rights reserved
//

// code guard
#if !defined(altar_models_reverso_Source_icc)
#error This header file contains implementation details of class altar::models::reverso::Source
#endif


// meta-methods
// constructor
altar::models::reverso::Source::
Source(double Qin, double G, double v, double mu, double drho, double g):
    // gsl entities
    _data(0),
    _locations(0),
    // material properties
    _Qin(Qin),
    _G(G),
    _v(v),
    _mu(mu),
    _drho(drho),
    _g(g),
    // sample vector layout
    _HsIdx(0),
    _HdIdx(0),
    _asIdx(0),
    _adIdx(0),
    _acIdx(0)
{}


// interface
void
altar::models::reverso::Source::
data(gsl_vector * data) {
    // attach; the vector belongs to the caller, we are just borrowing it
    _data = data;
    // make a channel
    pyre::journal::debug_t channel("reverso.source");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "attached data from " << _data
        << pyre::journal::endl;

    // all done
    return;
}


void
altar::models::reverso::Source::
locations(gsl_matrix * locations) {
    // attach and assume ownership
    _locations = locations;
    // make a channel
    pyre::journal::debug_t channel("reverso.source");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "attached locations from " << _locations
        << pyre::journal::endl;

    // all done
    return;
}


void
altar::models::reverso::Source::
layout(size_type HsIdx, size_type HdIdx,
       size_type asIdx, size_type adIdx, size_type acIdx) {
    // assign
    _HsIdx = HsIdx;
    _HdIdx = HdIdx;
    _asIdx = asIdx;
    _adIdx = adIdx;
    _acIdx = acIdx;

    // make a channel
    pyre::journal::debug_t channel("reverso.source");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "attached the parameter set layout"
        << pyre::journal::endl;

    // all done
    return;
}


// end of file
