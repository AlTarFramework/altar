// -*- C++ -*-
//
// eric m. gurrola <eric.m.gurrola@jpl.nasa.gov>
// (c) 2013
// all rights reserved
//

// code guard
#if !defined(altar_models_reverso_Source_icc)
#error This header file contains implementation details of class altar::models::reverso::Source
#endif


// meta-methods
// constructor
altar::models::reverso::Source::
Source(double g, double Gsm, double nu, double mu, double drho):
    _data(0),
    _locations(0),
    _los(0),
    _oids(0),
    _g(g),
    _Gsm(Gsm),
    _nu(nu),
    _mu(mu),
    _drho(drho),
    _x0Idx(0),
    _y0Idx(0),
    _t0Idx(0),
    _asIdx(0),
    _acIdx(0),
    _adIdx(0),
    _hsIdx(0),
    _hdIdx(0),
    _qIdx(0)
{}


// interface
void
altar::models::reverso::Source::
data(gsl_vector * data) {
    // attach; the vector belongs to the caller, we are just borrowing it
    _data = data;
    // make a channel
    pyre::journal::debug_t channel("reverso.source");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "attached data from " << _data
        << pyre::journal::endl;

    // all done
    return;
}


void
altar::models::reverso::Source::
locations(gsl_matrix * locations) {
    // attach and assume ownership
    _locations = locations;
    // make a channel
    pyre::journal::debug_t channel("reverso.source");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "attached locations from " << _locations
        << pyre::journal::endl;

    // all done
    return;
}


void
altar::models::reverso::Source::
los(gsl_matrix * los) {
    // attach and assume ownership
    _los = los;
    // make a channel
    pyre::journal::debug_t channel("reverso.source");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "attached LOS matrix from " << _los
        << pyre::journal::endl;

    // all done
    return;
}


void
altar::models::reverso::Source::
oids(const oids_type & oids) {
    // assign
    _oids.assign(oids.begin(), oids.end());
    // make a channel
    pyre::journal::debug_t channel("reverso.source");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "attached data set ids to the observations"
        << pyre::journal::endl;

    // all done
    return;
}


void
altar::models::reverso::Source::
layout(size_type x0Idx, size_type asIdx, size_type hsIdx, size_type qIdx,
       size_type offsetIdx) {
    // assign
    _x0Idx = x0Idx;
    _y0Idx = x0Idx + 1;
    _t0Idx = x0Idx + 2;
    _asIdx = asIdx;
    _acIdx = asIdx + 1;
    _adIdx = asIdx + 2;
    _hsIdx = hsIdx;
    _hdIdx = hsIdx + 1;
    _qIdx  = qIdx;
    _offsetIdx = offsetIdx;

    // make a channel
    pyre::journal::debug_t channel("reverso.source");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "attached the parameter set layout"
        << pyre::journal::endl;

    // all done
    return;
}


// end of file
