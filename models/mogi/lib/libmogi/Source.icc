// -*- C++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 2013-2020 parasim inc
// all rights reserved
//

// code guard
#if !defined(altar_models_mogi_Source_icc)
#error This header file contains implementation details of class altar::models::mogi::Source
#endif


// meta-methods
// constructor
altar::models::mogi::Source::
Source(double nu):
    _data(0),
    _locations(0),
    _los(0),
    _oids(0),
    _nu(nu),
    _xIdx(0),
    _yIdx(0),
    _dIdx(0),
    _sIdx(0),
    _offsetIdx(0)
{}


// interface
void
altar::models::mogi::Source::
data(gsl_vector * data) {
    // attach; the vector belongs to the caller, we are just borrowing it
    _data = data;
    // make a channel
    pyre::journal::debug_t channel("mogi.source");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "attached data from " << _data
        << pyre::journal::endl;

    // all done
    return;
}


void
altar::models::mogi::Source::
locations(gsl_matrix * locations) {
    // attach and assume ownership
    _locations = locations;
    // make a channel
    pyre::journal::debug_t channel("mogi.source");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "attached locations from " << _locations
        << pyre::journal::endl;

    // all done
    return;
}


void
altar::models::mogi::Source::
los(gsl_matrix * los) {
    // attach and assume ownership
    _los = los;
    // make a channel
    pyre::journal::debug_t channel("mogi.source");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "attached LOS matrix from " << _los
        << pyre::journal::endl;

    // all done
    return;
}


void
altar::models::mogi::Source::
oids(const oids_type & oids) {
    // assign
    _oids.assign(oids.begin(), oids.end());
    // make a channel
    pyre::journal::debug_t channel("mogi.source");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "attached data set ids to the observations"
        << pyre::journal::endl;

    // all done
    return;
}


void
altar::models::mogi::Source::
layout(size_type xIdx, size_type dIdx, size_type sIdx, size_type offsetIdx) {
    // assign
    _xIdx = xIdx;
    _yIdx = xIdx + 1;
    _dIdx = dIdx;
    _sIdx = sIdx;
    _offsetIdx = offsetIdx;

    // make a channel
    pyre::journal::debug_t channel("mogi.source");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "attached the parameter set layout"
        << pyre::journal::endl;

    // all done
    return;
}


// end of file
